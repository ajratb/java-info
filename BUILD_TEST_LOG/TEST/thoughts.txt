проверка свежереализованного функционала, проверка на случай поломки при доработках + опция уверенности при рефакторинге, основа для создания реализации при tdd, форма документирования... много их

Если собрать воедино, то цель одна - получить уверенность в коде. Это и есть цель любых тестов. Бывает ещё бизнесовое требование по проценту покрытия кода. Но это аналогичная цель, только для бизнеса - получить уверенность в разработанном продукте

И по поводу философий выше о цели тестов. Коллеги, цель тестов - надежность (уверенность в коде). Давайте не усложнять))


ПОКРЫТИЕ
Это целая тема для холивара. Я бы сослался на книжечку, которую можно почитать, она про теорию тестирования - "Принципы юнит тестирования".

!!!
Есть настроичные классы их надо исключать из метрики, это как минимум. Всякие ДТО, репозитории, контроллеры обычно не содержат тестируемой логики. И только сервисный слой как правило интересен.


ДОВОДЫ ПРОТИВ

Если у вас бесконечное количество ресурсов для обеспечения качества - не нужна никакая пирамида, хреначить бесконечное количество тестов на всё - и норм. А вот если нужно с ограниченными ресурсами максимизировать защиту от косяков, то придётся выбирать какую-то стратегию распределения ресурсов. Пирамида является плюс-минус универсальной стратегией такого распределения, которая работает в среднем хорошо.